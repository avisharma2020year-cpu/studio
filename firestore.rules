rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helper functions ----------
    function isAuth() {
      return request.auth != null;
    }

    function getUserDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isAdmin() {
      return isAuth() && getUserDoc(request.auth.uid).role == 'admin';
    }

    function isFaculty() {
      return isAuth() && getUserDoc(request.auth.uid).role == 'faculty';
    }

    function isStudent() {
      return isAuth() && getUserDoc(request.auth.uid).role == 'student';
    }

    // Checks if the authenticated student belongs to the same course & semester
    // as the timetable/document being read. Used for timetable read security.
    function studentMatchesCourseSemester(docCourse, docSemester) {
      return isStudent() &&
             getUserDoc(request.auth.uid).course == docCourse &&
             getUserDoc(request.auth.uid).semester == docSemester;
    }

    // ---------- users collection ----------
    match /users/{userId} {
      // Admins can read/write any user doc.
      allow read, write: if isAdmin();

      // A signed-in user can read and update their own user document.
      allow read, update: if isAuth() && request.auth.uid == userId;

      // Allow users to create their own profile (useful if sign-up flow creates doc).
      // Creation by others only allowed to admins.
      allow create: if isAdmin() || (isAuth() && request.auth.uid == userId);

      // Deletion only allowed to admins
      allow delete: if isAdmin();
    }

    // ---------- timetables collection ----------
    // Timetable documents must contain fields: course, semester (number), etc.
    match /timetables/{timetableId} {
      // Read:
      // - Admins & Faculty can read all timetables.
      // - Students may read timetables only for their own course + semester.
      allow get, list: if isAuth() &&
        ( isAdmin()
          || isFaculty()
          || studentMatchesCourseSemester(resource.data.course, resource.data.semester)
        );

      // Writes (create/update/delete) only by Admin
      allow create, update, delete: if isAdmin();
    }

    // ---------- events collection ----------
    match /events/{eventId} {
      // Events are readable by any authenticated user
      allow get, list: if isAuth();

      // Only Admins can create/update/delete events
      allow create, update, delete: if isAdmin();
    }

    // ---------- requests collection ----------
    // Request document structure assumed to include:
    // studentId, studentName, studentPrn, missedClasses (array), facultyId (string or ''), reason, eventId (optional), timestamp, status
    match /requests/{requestId} {
      // Create: only students can create requests and studentId must equal their uid.
      // Also basic validation: status should start as "Pending".
      allow create: if isStudent()
        && request.resource.data.studentId == request.auth.uid
        && request.resource.data.status == "Pending"
        && request.resource.data.missedClasses is list;

      // Read:
      // - Admins can read all requests.
      // - Students can read their own requests.
      // - Faculty can read requests assigned to them (facultyId == their uid).
      allow get, list: if isAuth() && (
          isAdmin()
          || (isStudent() && resource.data.studentId == request.auth.uid)
          || (isFaculty() && resource.data.facultyId == request.auth.uid)
      );

      // Update:
      // - Admins can update any request (finalize, edit).
      // - Faculty can update (approve/reject) only requests assigned to them.
      //   They must remain the assigned faculty (facultyId unchanged or equal to request.auth.uid).
      allow update: if isAuth() && (
          isAdmin()
          || (isFaculty()
             && resource.data.facultyId == request.auth.uid
             // ensure the request is still assigned to the same faculty (prevent reassign)
             && request.resource.data.facultyId == request.auth.uid
          )
      );

      // Delete only by admin
      allow delete: if isAdmin();
    }

    // ---------- fallback: deny everything else ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
