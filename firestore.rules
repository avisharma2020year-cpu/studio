
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isFaculty() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    function isStudent() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Rules for user documents
    match /users/{userId} {
      // Admins can create, read, and write any user document.
      allow read, write: if isAdmin();
      // Users can read and update their own document.
      allow read, update: if isAuth() && request.auth.uid == userId;
    }

    // Rules for timetable entries
    match /timetables/{docId} {
      // All authenticated users can read timetables.
      allow read: if isAuth();
      // Only admins can write (create, update, delete) timetable entries.
      allow write: if isAdmin();
    }

    // Rules for pre-approved events
    match /events/{docId} {
       // All authenticated users can read events.
      allow read: if isAuth();
      // Only admins can write events.
      allow write: if isAdmin();
    }

    // Rules for absence requests
    match /requests/{requestId} {
       // Admins can read and write any request.
      allow read, write: if isAdmin();
      
      // Students can create requests for themselves and read their own requests.
      allow create: if isStudent() && request.resource.data.studentId == request.auth.uid;
      allow read: if isStudent() && resource.data.studentId == request.auth.uid;
      
      // Faculty can read and update requests assigned to them.
      allow read, update: if isFaculty() && resource.data.facultyId == request.auth.uid;
    }
  }
}
