
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is a faculty member
    function isFaculty() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS collection
    match /users/{userId} {
      // Admins can read, create, and delete any user.
      allow read, delete: if isAdmin();
      // Allow admin to create users
      allow create: if isAdmin();
      
      // Any authenticated user can create their own user document (for first login).
      allow create: if isOwner(userId);
      
      // Users can read their own profile.
      allow get: if isOwner(userId);

      // Users can update their own profile, but cannot change their role. Admins can update anything.
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role) || isAdmin();
    }

    // TIMETABLES & EVENTS - Any authenticated user can read
    match /timetables/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); // Only admins can create/update/delete timetables
    }
    match /events/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); // Only admins can create/update/delete events
    }

    // REQUESTS collection
    match /requests/{requestId} {
      // Admins can read/write all requests
      allow read, write: if isAdmin();

      // Students can create requests for themselves and read their own requests.
      allow create: if request.auth.uid == request.resource.data.studentId;
      allow get, list: if request.auth.uid == resource.data.studentId;

      // Faculty can read requests assigned to them.
      allow get, list: if isFaculty() && request.auth.uid == resource.data.facultyId;
      
      // Faculty can update (approve/reject) requests assigned to them.
      allow update: if isFaculty() && request.auth.uid == resource.data.facultyId;
    }
  }
}
